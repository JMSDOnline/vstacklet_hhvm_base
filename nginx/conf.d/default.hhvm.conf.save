server {
    listen *:8080;
    listen [::]:8080;
    # listen [::]:443 ssl http2;
    # listen *:443 ssl http2;
    server_name sitename;

    access_log /srv/www/sitename/logs/sitename_access.log;
    error_log /srv/www/sitename/logs/sitename_error.log;

    # include vstacklet/directive-only/ssl.conf;
    # ssl_certificate /srv/www/sitename/ssl/sitename.crt;
    # ssl_certificate_key /srv/www/sitename/ssl/sitename.key;
    root /srv/www/sitename/public;
    index index.html index.htm index.php;


    # These options are for nginx caching.
    # Update the uri paths to match your needs.
    # Typically you would want to add
    # /wp-admin/ - Wordpress
    # /administrator/ - Joomla! etc...
    set $no_cache 0;
    if ($query_string) {
      set $no_cache 1;
    }
    if ($http_x_custom_header) {
      set $no_cache 0;
    }
    if ($uri ~ "/your-admin-login/") {
      set $no_cache 1;
    }
    if ($http_cookie ~ "users_login_cookie") {
      set $no_cache 1;
    }
    location ~ \.(hh|php)$ {
        try_files $uri =404;

        fastcgi_keep_conn on;
        fastcgi_pass   unix:/var/run/hhvm/hhvm.sock;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include        fcgi.conf;
        fastcgi_read_timeout    300;
    }

    # Location Functions
    locconf1
    locconf2
    locconf3
    locconf4
    # Lets Encrypt - required .well-known directory for generating ssl
    # Uncomment this if it's something you don't require.
    # locconf5

    # Security Functions
    secconf1
    secconf2
    secconf3

    # WordPress Specific
    # include wordpress.conf;
    # include restrictions.conf;
    # We only enable this option if either W3TC is in effect on a WordPress install
    # Or you manage an override from your application root.
	# An example would be that of Admin Tools for Joomla!
    # include /srv/www/sitename/public/nginx.conf;

}
